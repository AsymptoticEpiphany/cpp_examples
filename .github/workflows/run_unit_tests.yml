name: C++ CI/CD

on:
  push:
    paths-ignore:
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

jobs:
  # =========================================
  # 1️⃣ Build and Test (Debug + Sanitizers)
  # =========================================
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      ci-artifact-path: build_release/main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake g++ ninja-build

      # Debug build with sanitizers
      - name: Configure Debug Build
        run: cmake -S . -B build_debug -G Ninja -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZERS=ON

      - name: Build Debug
        run: cmake --build build_debug

      - name: Run Unit Tests (Debug + Sanitizers)
        run: ASAN_OPTIONS=detect_leaks=1:abort_on_error=1:color=always ctest --test-dir build_debug --output-on-failure

      # Release build artifact for inspection
      # Only runs if unit tests with debugging and sanitizers works
      - name: Configure Release Build
        run: cmake -S . -B build_release -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build Release
        run: cmake --build build_release

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-binary
          path: build_release/main

  # =========================================
  # 2️⃣ Tagged Release → Versioned Binary + GitHub Release
  # =========================================
  tagged-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Always rebuild production Release binary
      - name: Configure Release Build
        run: cmake -S . -B build_release -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build Release
        run: cmake --build build_release

      # Rename binary to include version
      - name: Rename binary with version
        run: |
          TAG="${GITHUB_REF##*/}"
          VERSIONED_NAME="my_app_${TAG}_linux_x64"
          mv build_release/main "${VERSIONED_NAME}"
          echo "VERSIONED_NAME=${VERSIONED_NAME}" >> $GITHUB_ENV

      # Upload versioned binary to GitHub Release
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.VERSIONED_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
